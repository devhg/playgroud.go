package designpattern

// 本质就是面向接口编程

// 桥接模式主要用于将抽象部分和实现部分进行解耦，使得它们能够各自往独立的方向变化。
// 它解决了在模块有多种变化方向的情况下，用继承所导致的类爆炸问题。举一个例子，
// 一个产品有形状和颜色两个特征（变化方向），其中形状分为方形和圆形，颜色分为红色和蓝色。
// 如果采用继承的设计方案，那么就需要新增4个产品子类：方形红色、圆形红色、方形蓝色、圆形红色。
// 如果形状总共有m种变化，颜色有n种变化，那么就需要新增m*n个产品子类！现在我们使用桥接模式进行优化，
// 将形状和颜色分别设计为一个抽象接口独立出来，这样需要新增2个形状子类：方形和圆形，
// 以及2个颜色子类：红色和蓝色。同样，如果形状总共有m种变化，颜色有n种变化，总共只需要新增m+n个子类！

// 我们通过将形状和颜色抽象为一个接口，使产品不再依赖于具体的形状和颜色细节，从而达到了解耦的目的。
// 桥接模式本质上就是面向接口编程，可以给系统带来很好的灵活性和可扩展性。如果一个对象存在多个变化的方向，
// 而且每个变化方向都需要扩展，那么使用桥接模式进行设计那是再合适不过了。
