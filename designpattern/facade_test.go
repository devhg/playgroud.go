package designpattern

// 外观模式

//从结构上看，外观模式非常的简单，它主要是为子系统提供了一个更高层次的对外统一接口，
//使得Client能够更友好地使用子系统的功能。图中，Subsystem Class是子系统中对象的简称，
//它可能是一个对象，也可能是数十个对象的集合。外观模式降低了Client与Subsystem之间的耦合，
//只要Facade不变，不管Subsystem怎么变化，对于Client而言都是无感知的。

//外观模式在程序设计中用的非常多，比如我们在商城上点击购买的按钮，
//对于购买者而言，只看到了购买这一统一的接口，
//但是对于商城系统而言，其内部则进行了一系列的业务处理，比如库存检查、订单处理、支付、物流等等。
//外观模式极大地提升了用户体验，将用户从复杂的业务流程中解放了出来。
//外观模式经常运用于分层架构上，通常我们都会为分层架构中的每一个层级提供一个或多个统一对外的访问接口，
//这样就能让各个层级之间的耦合性更低，使得系统的架构更加合理。
